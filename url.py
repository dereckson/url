#!/usr/bin/env python3

#   -------------------------------------------------------------
#   Operations utilities
#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   Project:        Nasqueron
#   Author:         SÃ©bastien Santoro aka Dereckson
#   Created:        2018-09-22
#   License:        BSD-2-Clause
#   -------------------------------------------------------------
#
#   <auto-generated>
#       This file is managed by our rOPS SaltStack repository.
#
#       Changes to this file may cause incorrect behavior
#       and will be lost if the state is redeployed.
#   </auto-generated>


import os
import sys
import yaml


#   -------------------------------------------------------------
#   Configuration file locator
#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


def get_candidates_configuration_directories():
    candidates = []

    if 'HOME' in os.environ:
        candidates.append(os.environ['HOME'])

    candidates.append('/usr/local/etc')
    candidates.append('/etc')

    return candidates


def get_candidates_configuration_files():
    return [directory + "/.urls.yml" for directory
            in get_candidates_configuration_directories()]


def find_configuration_file():
    for candidate in get_candidates_configuration_files():
        if os.path.isfile(candidate):
            return candidate


#   -------------------------------------------------------------
#   Configuration file parser
#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


def parse_configuration_file(filename):
    configuration_file = open(filename, 'r')
    configuration = yaml.load(configuration_file)
    configuration_file.close()

    if 'urls' not in configuration:
        configuration['urls'] = {}

    return configuration


def get_configuration():
    configuration_file = find_configuration_file()

    if configuration_file is None:
        print_error("No shell configuration file found")
        exit(2)

    return parse_configuration_file(configuration_file)


#   -------------------------------------------------------------
#   URL resolver
#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

def extract_relative_url (base_directory, search_path):
    n = len(base_directory) + 1
    return search_path[n:]
    

def resolve_url (base_directory, args, search_path):
    if 'static' in args:
        return args['static'] + extract_relative_url(base_directory, search_path)

    return None


def find_path (base_directory, search_path):
    if os.path.isabs(search_path):
        return search_path

    return os.path.normpath(os.path.join(base_directory, search_path))


def find_url(urls, base_directory, required_path):
    path = find_path(base_directory, required_path)

    for url_base_dir, url_args in urls.items():
        if path.startswith(url_base_dir):
            return resolve_url(url_base_dir, url_args, path)

    return None


#   -------------------------------------------------------------
#   Runner code
#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


def get_program_name():
    return os.path.basename(sys.argv[0])


def print_error(err):
    print("{}: {}".format(get_program_name(), err), file=sys.stderr)


def usage():
    print("usage: url [path]", file=sys.stderr)


def parse_path_argument():
    argc = len(sys.argv)

    if argc == 1:
        return '.'
    elif argc == 2:
        return sys.argv[1]
    else:
        usage()
        exit(1)


def main():
    required_path = parse_path_argument()
    config = get_configuration()

    url = find_url(config['urls'], os.getcwd(), required_path)
    if url is None:
        print_error("No URL found.")
    else:
        print(url)


if __name__ == '__main__':
    main()
